import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configuração para melhor visualização dos gráficos (opcional)
sns.set_style("whitegrid")

# Criando um DataFrame de Vendas Fictício
np.random.seed(42) # Para reprodutibilidade

dados = {
    'ID_Venda': range(1001, 1051),
    'Data': pd.to_datetime(pd.date_range(start='2024-01-01', periods=50)),
    'Categoria': np.random.choice(['Eletrônicos', 'Vestuário', 'Alimentos', 'Decoração'], size=50),
    'Vendas': np.random.randint(50, 500, size=50) * 10,
    'Regiao': np.random.choice(['Norte', 'Sul', 'Leste', 'Oeste'], size=50)
}

df = pd.DataFrame(dados)

# Introduzindo alguns dados faltantes (NaN) e valores incorretos para a limpeza
df.loc[3:5, 'Vendas'] = np.nan
df.loc[10, 'Categoria'] = 'NaN'
df.loc[48, 'Vendas'] = -100 # Valor negativo (incorreto)

print("DataFrame Fictício Criado:")
print(df.head(10))
print("-" * 30)
# 3.1 Informações do DataFrame
print("Informações e Tipos de Dados:")
df.info()
print("-" * 30)

# 3.2 Estatísticas Descritivas
print("Estatísticas Descritivas das Colunas Numéricas:")
print(df['Vendas'].describe())
print("-" * 30)

# 3.3 Verificação de Valores Nulos
print("Total de Valores Nulos por Coluna:")
print(df.isnull().sum())
print("-" * 30)
# 4.1 Tratamento de Valores Faltantes (NaN) na coluna 'Vendas'
# Vamos preencher os NaNs com a MEDIANA, pois é menos sensível a outliers do que a média.
mediana_vendas = df['Vendas'].median()
df['Vendas'].fillna(mediana_vendas, inplace=True)

# 4.2 Tratamento de Valores Incorretos/Ruído na coluna 'Vendas'
# Removendo ou corrigindo valores negativos (Vendas não pode ser negativo)
# Neste caso, vamos substituir valores menores ou iguais a zero por NaN e depois preencher com a mediana novamente.
df['Vendas'] = np.where(df['Vendas'] <= 0, np.nan, df['Vendas'])
df['Vendas'].fillna(mediana_vendas, inplace=True) # Preenchendo o valor corrigido

# 4.3 Tratamento de Valores Incorretos/Ruído na coluna 'Categoria'
# Removendo a linha com a categoria 'NaN'
df = df[df['Categoria'] != 'NaN']

print("Verificação Após a Limpeza:")
print(df.isnull().sum())
print("\nPrimeiras linhas após a limpeza:")
print(df.head(10))
print("-" * 30)
# 5.1 Análise - Agrupamento de Dados
# Calculando o total de vendas por 'Regiao'
vendas_por_regiao = df.groupby('Regiao')['Vendas'].sum().sort_values(ascending=False).reset_index()

print("Vendas Totais por Região:")
print(vendas_por_regiao)
print("-" * 30)

# 5.2 Visualização - Criar um gráfico de barras para comunicar o resultado
plt.figure(figsize=(10, 6))

# Usando Seaborn para criar o gráfico
sns.barplot(x='Regiao', y='Vendas', data=vendas_por_regiao, palette='viridis')

# Adicionando título e rótulos
plt.title('Total de Vendas por Região', fontsize=16)
plt.xlabel('Região', fontsize=12)
plt.ylabel('Total de Vendas (em milhões)', fontsize=12)

# Adicionar o valor total de vendas no topo de cada barra
for index, row in vendas_por_regiao.iterrows():
    plt.text(index, row['Vendas'], f'R$ {row["Vendas"]:,.0f}', color='black', ha="center", va="bottom")

plt.show()